# -*- coding: utf-8 -*-
"""RNN on balanced data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OphkdLqBcIpW50VMkGGo8wtGAomIC8XR

# Data
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

import tensorflow as tf 

from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense

df = pd.read_csv("datawide.csv")

df.shape

df.describe()

df.head()

# Only keep the group 1 and time-series data
df1 = df.iloc[:,1:12] 
df2 = df.iloc[:,1:13]
df1

"""# Sequence Classification with LSTM Recurrent Neural Networks in Python with Keras"""

import numpy
from keras.datasets import imdb
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers.embeddings import Embedding
from keras.preprocessing import sequence
# fix random seed for reproducibility
numpy.random.seed(42)

df_t = np.transpose(df2)
df_t

X = df_t.iloc[:11]
X

y = df_t.iloc[11]
y

X_array = np.transpose(X).to_numpy()
y_array = np.transpose(y).to_numpy()

X_array.shape, y_array.shape

X_reshape = X_array.reshape(488,11,1)
X_reshape[1]
y_reshape = y_array.reshape(488,1)
y_reshape[1]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_reshape, y_reshape, test_size=0.1, random_state=42)

model = Sequential()
model.add(LSTM(100))
model.add(Dense(1, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, batch_size=3)
scores = model.evaluate(X_test, y_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))

