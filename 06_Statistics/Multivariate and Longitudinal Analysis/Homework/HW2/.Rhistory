sapply(flahgs, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class,character(1))
?tapply(vector, index, function)
?tapply()
info()
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
attach(iris)
SE <- iris[Species == "setosa", 1:4]
#Build the boxplot of setosa;
boxplot(SE, boxwex = 0.5, las=1, names=c("SL","SW","PL","PW"), main="setosa",
xlab="variables",ylab="y values")
#Extract the versicolor species from iris data;
VER <- iris[Species == "versicolor", 1:4]
#Build the boxplot of versicolor;
boxplot(VER, boxwex = 0.5, las=1, names=c("SL","SW","PL","PW"), main="versicolor",
xlab="variables",ylab="y values")
#Extract the virginica species from iris data;
VIR <- iris[Species == "virginica", 1:4]
#Build the boxplot of virginica;
boxplot(VIR, boxwex = 0.5, las=1, names=c("SL","SW","PL","PW"), main="virginica",
xlab="variables",ylab="y values")
SE_means <- colMeans(SE)
SE_means
#Compute the sample covariance matrix;
SE_S <- cov(SE)
#Compute the sample correlation matrix;
cor(SE)
#Sample size of setosa flowers;
SE_n <- nrow(SE)
#Estimate covariance of setosa;
round(SE_S/SE_n, 5)
SE_means <- colMeans(SE)
SE_means
cor(SE)
VER_means
VIR_means
cor(SE)
SE_S
SE_S
round(SE_S, 4)
VER_S <- cov(VER)
round(VER_S, 4)
VIR_S <- cov(VIR)
round(VIR_S,4)
library(HSAUR3)
attach(skulls)
epoch_c4000 <- skulls[epoch == "c4000BC", 2:5]
#Estimate of the true mean of all skulls with epoch c4000BC;
epoch_c4000_mean <- colMeans(epoch_c4000)
epoch_c4000_mean
#Sample variance-covariance was used to estimate
S_eopch_c4000 <- cov(epoch_c4000)
S_eopch_c4000
n_c4000 <- nrow(epoch_c4000)
#Estimate the population variance covariance of the population mean;
E <- S_eopch_c4000/n_c4000
n_c4000 <- nrow(epoch_c4000)
#Estimate the population variance covariance of the population mean;
E <- S_eopch_c4000/n_c4000
E
A <- matrix(c(1,0,0,-1,0,1,0,-1), nrow=2, ncol=4, byrow=TRUE)
A
A %*% E %*% t(A)
sqrt(sum(5*5+1*1+3*3))
sqrt(sum((-1)*(-1)+ 3*3 + 1*1)
sqrt(sum((-1)*(-1)+ 3*3 + 1*1))
sqrt(sum((-1)*(-1)+ 3*3 +1*1))
x <- sqrt(sum(5*5+1*1+3*3))
x
#Find the length of y;
y <- sqrt(sum((-1)*(-1)+ 3*3 +1*1))
y
t(x) * y
t(x) %*% y
#Find the length of x;
sqrt(sum(5*5+1*1+3*3))
#Find the length of y;
sqrt(sum((-1)*(-1)+ 3*3 +1*1))
x <- t(5,1,3)
x <- matrix(c1,3,1)
c1 <- c(5,1,3)
x <- matrix(c1,3,1)
x
c2 <- c(-1,3,1)
y <- matrix(c2,3,1)
y
t(x) %*% y
t(x) * y
par(nfrow(c(3,1)))
par(nfrow=c(3,1))
par(nfrow=c(1,3))
par(mfrow=c(1,3))
library(ggplot2)
library(GGally)
ggpairs(SE)
#Make the pairs-plot of versicolor;
ggpairs(VER)
#Make the pairs-plot of virginica;
ggpairs(VIR)
par(mfrow=c(1,1))
ggpairs(SE, col=2)
#Make the pairs-plot of versicolor;
ggpairs(VER, col =4)
#Make the pairs-plot of virginica;
ggpairs(VIR, col =6)
#Make the pairs-plot of setosa;
ggpairs(SE)
ggpairs(VER)
#Make the pairs-plot of virginica;
ggpairs(VIR)
ggpairs(SE)
#Question 4b
#Extract all data of c4000BC;
library(HSAUR3)
library(HSAUR3)
attach(skulls)
epoch_c4000 <- skulls[epoch == "c4000BC", 2:5]
epoch_c4000
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
d1 <- Sys.Date()
clss(d1)
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- strptime(1986-10-17)
t3 <- strptime(19861017)
t3 <-  "October 17, 1986 08:24"
strtime(t3)
strtime(t3, "%B %d, %Y %H:%M")
strptime(t3, "%B %d, %Y %H:%M")
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t43
t4
class(t4)
Sys.time > 1
Sys.time > t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
?lm
lm(y~x)
y=c(1,3,4)
x = c(2,4,6)
lm(y~x)
plot(y,x)
swirl()
?sample()
?sampel()
?sample()
?sample
sample(1:6, 4, replace =TRUE)
sample(1:6, 4, replace =TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,prob=c(0.3,0.7))
?sample
flips <- sample(c(0,1),100,prob=c(0.3,0.7), replace=TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flip2 <- rbinom((1, size=100, prob=c(0.7, 0.3)))
flip2 <- rbinom((1, size=100, prob=0.7)
flip2 <- rbinom(1, size=100, prob=0.7)
flip2 <- rbinom(100, size=1, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
rpois(5,10)
my_pois <- replicate(rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cloMeans(my_pois)
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y= cars$dist)
plot(dis~speed, cars)
plot(dist ~speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, main="My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot Subtitle")
plot(cars, main = "My Plot")
plot(cars, sub= "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
library(mtcars)
library("mtcars")
infor
?info
mtcars
data(matcars)
data(mtcars)
?boxplot
boxplot(y = mpg ~ cyl, data=mtcars)
boxplot(formula = mpg ~ cyl, data=mtcars)
hist(mtcars$mpg)
1
library(swirl)
swirl()
install_course("Data Analysis")
swirl::install_course("Exploratory Data Analysis")
swirl()
swirl::install_course("Mathematical Biostatistics Boot Camp")
swirl::install_course("Getting and Cleaning Data")
swirl::install_course("Regression Models")
swirl::install_course("Statistical Inference")
swirl()
source("http://wush978.github.io/R/init-swirl.R")
install.packages("remotes")
library(remotes)
source("http://wush978.github.io/R/init-swirl.R")
swirl()
swirl::install_course("Exploratory Data Analysis")
swirl()
combn(1:6,4)
install.packages("nortest")
?read.tavle
?read.table
setwd("~/Documents/course/Statistics/ST 537 (2019 Fall)/Homework/HW2")
#Question 1
#Load the data in R
data <- read.table("data/T4-3.txt", header = F)
#Question 1
#Load the data in R
data <- read.table("data/T4-3.DAT", header = F)
#Question 1
#Load the data in R
data <- read.table("T4-3.DAT", header = F)
#Question 1
#Load the data in R
data <- read.table("data/T4-3.txt", header = F)
data <- read.table(file.choose())
#Question 1
#Load the data in R
setwd("~/Documents/course/Statistics/ST 537 (2019 Fall)/Homework/HW2")
data <- read.table("data/T4-3.txt", header = F)
data <- read.table("~/Documents/course/Statistics/ST 537 (2019 Fall)/Homework/HW2.data/T4-3.txt", header = F)
data
data <- read.table(file.choose())
data <- read.table(file.choose())
shapiro.test(data)
#Question 1
#Load the data in R and assign as data
#Remove the twi two outliers #9 and #16 rows;
new_data <- data[-(9,16), ]
#Question 1
#Load the data in R and assign as data
#Remove the twi two outliers #9 and #16 rows;
new_data <- data[-c(9,16), ]
new_data
#Attach the new data;
attach(new_data)
#Perform the Shapiro-Wilk tests;
apply(new_data[, 1:4], 2, shapiro.test)
#Load the MVN library;
library(MVN)
install.packages("MVN")
#Load the MVN library;
library(MVN)
#Perform Roystpn's tests on new data;
mvn(new_data[, 1:4], mvnTest = "royston", multivariatePlot = "qq")
#Question 2
#Load the library of HSAUR3;
library(HSAUR3)
#attach the data;
attch(skulls)
#attach the data;
attach(skulls)
skulls
#Extract the c4000BC epoch from the data;
c4000BC <- data[, epcoh=="c4000BC"]
#Extract the c4000BC epoch from the data;
c4000BC <- data[, epoch=="c4000BC"]
#Extract the c4000BC epoch from the data;
c4000BC <- data[epoch=="c4000BC", ]
c4000BC
#Create the pairs-plot;
library(ggplot2)
library(GGally)
ggpairs(c4000BC)
c4000BC <- skulls[epoch=="c4000BC", ]
c4000BC
#Extract the c4000BC epoch from the data;
c4000BC <- skulls[epoch=="c4000BC",2:5]
c4000BC
library(ggplot2)
library(GGally)
ggpairs(c4000BC)
mvn(c4000BC[,1:4], multivariatePlot = "qq")
#plot the chi-square;
plot(qchi, sortd, pch=19, xlab="Chi-square quantiles", ylab = "Mahalanobis squared)
}
#Create a chi-square plot with a 45 Â°C line;
mvn(c4000BC[,1:4], multivariatePlot = "qq")
chisquare <- function(x){
#x: data matrix;
#number of variables;
p <- ncol(x)
#sample size;
n <- nrow(x)
# xbar and s;
xbar <- colMeans(x)
s <- cov(x)
#Mahalanobis distance;
x.cen <- scale(x, center=T, scale =F)
d2 <- diag(x.cen %*% solve(s) %*% t(x.cen))
#chi-square quantiles
qchi <- qchisq((1:n - 0.5)/n, df=p)
#sorted d^2 value;
sortd <- sort(d2)
#plot the chi-square;
plot(qchi, sortd, pch=19, xlab="Chi-square quantiles", ylab = "Mahalanobis squared
distances", main="Chi-square QQ plot")
}
chisquare.plot <- function(x){
#x: data matrix;
#number of variables;
p <- ncol(x)
#sample size;
n <- nrow(x)
# xbar and s;
xbar <- colMeans(x)
s <- cov(x)
#Mahalanobis distance;
x.cen <- scale(x, center=T, scale =F)
d2 <- diag(x.cen %*% solve(s) %*% t(x.cen))
#chi-square quantiles
qchi <- qchisq((1:n - 0.5)/n, df=p)
#sorted d^2 value;
sortd <- sort(d2)
#plot the chi-square;
plot(qchi, sortd, pch=19, xlab="Chi-square quantiles", ylab = "Mahalanobis squared
distances", main="Chi-square QQ plot")
}
#Call the function and draw the chi-square plot;
chisquare.plot(x=c4000BC[, 1:4])
mvn(c4000BC[,1:4], multivariatePlot = "qq")
chisquare.plot(x=c4000BC[, 1:4])
?abline
abline(45)
abline(b=45)
abline(b=45)
abline(a=0, b=45)
abline(b=45)
mvn(c4000BC[,1:4], multivariatePlot = "qq")
chisquare.plot(x=c4000BC[, 1:4])
abline(0,1)
#Add the line;
abline(0,1)
#Question 2d
#Perform the univariate Shapiro-Wilk test;
apply(c4000BC[,1:4], 2, shapiro.test)
#Perform the Royston tests;
mvn(c4000BC[,1:4], mvnTest = "royston")
z1 <- scale(c4000BC[,1])
z1
z2 <- scale(c4000BC[,2])
z1 <- scale(c4000BC[,1])
z2 <- scale(c4000BC[,2])
z3 <- scale(c4000BC[,3])
z4 <- scale(c4000BC[,4])
s1 <- cov(c4000BC[,1])
chisquare_plot1 <- chisquare.plot(x=c4000BC[, 1:4])
chisquare_plot1
chisquare.plot <- function(x){
#x: data matrix;
#number of variables;
p <- ncol(x)
#sample size;
n <- nrow(x)
# xbar and s;
xbar <- colMeans(x)
s <- cov(x)
#Mahalanobis distance;
x.cen <- scale(x, center=T, scale =F)
d2 <- diag(x.cen %*% solve(s) %*% t(x.cen))
#chi-square quantiles
qchi <- qchisq((1:n - 0.5)/n, df=p)
#sorted d^2 value;
sortd <- sort(d2)
#plot the chi-square;
plot(qchi, sortd, pch=19, xlab="Chi-square quantiles", ylab = "Mahalanobis squared
distances", main="Chi-square QQ plot")
}
chisquare_plot1 <- chisquare.plot(x=c4000BC[, 1:4])
chisquare_plot1
abline(0,1)
x1 <- c4000BC[,1]
x1
x1 <- c4000BC[,1]
x2 <- c4000BC[,2]
x3 <- c4000BC[,3]
x4 <- c4000BC[,4]
s1 <- cov(x1)
s <- cov(c4000BC)
z1 <- scale(c4000BC[,1])
x1.cen <- scale(c4000BC[,1], center=T, scale =F)
?scale
z1 <- scale(c4000BC[,1],scale=F)
z1 <- scale(c4000BC[,1],scale=F)
z2 <- scale(c4000BC[,2],scale=F)
z3 <- scale(c4000BC[,3],scale=F)
z4 <- scale(c4000BC[,4],scale=F)
d1 <- diag(z1 %*% solve(s) %*% t(z1))
s <- cov(c4000BC)
z1 <- scale(c4000BC[,1],scale=F)
source('~/Documents/course/Statistics/ST 537 (2019 Fall)/Homework/HW2/HW2.R', echo=TRUE)
d1 <- diag(z1 %*% solve(s) %*% t(z1))
x1.cen <- scale(c4000BC[,1], center=T, scale =F)
x1.cen <- scale(c4000BC[,1], center=T, scale =F)
d1 <- diag(x1.cen %*% solve(s) %*% t(x1.cen))
install.packages("mnormt")
install.packages("mnormt")
#Question 3
#Load the library;
library(mnormt)
?rmnorm
library(mass)
library(MASS)
?mvrnorm
?rmorm
?rmnorm
#Set the 100 data points;
set.seed(100)
z_1 <- rmnorm(100, vcov=cbind(c(1,0.3),c(0.3,1)))
z_1 <- rmnorm(100, mean=rep(1,2), varcov=cbind(c(1,1),c(1,2)))
z_1
library(car)
install.packages("carData")
install.packages("carData")
library(car)
data3 <- rmnorm(100, mean=rep(1,2), varcov=cbind(c(1,1),c(1,2)))
#Assign the value as u1 and u2;
u1 <- data3[,1]
u2 <- data3[,2]
scatterplot(u1,u2)
#Make a scatter plot of u1 and u2;
plot(u1,u2)
#Overlay data ellipse (50%, 95%);
dataEllipse(u1,u2,ellipse.label = c(0.5,0.95), levels=c(0.5,0.95), fill=TRUE, fill.aplpha=0.1)
#Overlay data ellipse (50%, 95%);
dataEllipse(u1,u2,xlim(-2,5), ylim(-3,8), ellipse.label = c(0.5,0.95), levels=c(0.5,0.95), fill=TRUE, fill.aplpha=0.1)
dataEllipse(u1,u2,xlim=c(-2,5), ylim=c(-3,8), ellipse.label = c(0.5,0.95),
levels=c(0.5,0.95), fill=TRUE, fill.aplpha=0.1)
dataEllipse(u1,u2,xlim=c(-2,5), ylim=c(-3,8), pch=20, col=c("red", "green"),
ellipse.label = c(0.5,0.95), levels=c(0.5,0.95), fill=TRUE, fill.aplpha=0.1)
i = u1 + u2
plot(i)
?rmnorm
data4 <- rmnorm(100, mean=c(1,2,3), varcov=cbind(c(2,1,1),c(1,1,1),c(1,1,3)))
data4
ggpairs(data4)
