setwd("~/Documents/Coding/Data Science/Machine learning/Online Course/Udemy/Data Science and Machine Learning")
setwd("~/Documents/Coding/Data Science/Machine learning/Online Course/Udemy/Data Science and Machine Learning/R-Course-HTML-Notes/R-for-Data-Science-and-Machine-Learning/Data Manipulation in R")
#List the excel files;
excel_sheets("Sample-Sales-Data.xlsx")
setwd("~/Documents/Coding/Data Science/Machine learning/Online Course/Udemy/Data Science and Machine Learning/R-Course-HTML-Notes/R-for-Data-Science-and-Machine-Learning/Data Input and Output with R")
#List the excel files;
excel_sheets("Sample-Sales-Data.xlsx")
df <- read_excel("Sample-Sales-Data.xlsx",sheet="Sheet1")
head(df)
#For writing csv files;
install.packages("xlsx")
library(xlsx)
library(xlsx)
install.packages("rJava")
install.packages("xlsxjars")
library(xlsx)
if (x%%2==0) {
print("X is even")
}else {
print("X is odd")
}
x <- 3
if (x%/%2) {
print("X is even")
}else {
print("X is odd")
}
x <- 3
if (x%/%2==0) {
print("X is even")
}else {
print("X is odd")
}
if (is.matrix(x)=TRUE) {
print("X is a matrix")
}else {
print("X is not a matrix")
}
if (is.matrix(x)=TRUE){
print("X is a matrix")
}
if (is.matrix(x)=TRUE) {
print("X is a matrix")
}
if (is.matrix(x)=TRUE) {
print("X is a matrix")
}
if (is.matrix(x)=TRUE) {
print("X is matrix")
}
if (is.matrix(x)=TRUE) {
print("X is matrix")
} else {
print("X is not")
}
if (is.matrix(x)) {
print("X is matrix")
} else {
print("X is not")
}
x <- c(3,7,1)
for (i in 1:3) {
print(i)
}
my.list <- list(c(1,2,3), mtcars,12)
for (item in my.list) {
print(item)
}
mat <- matrix(1:25, nrow=5)
print(mat)
print(num)
for (num in mat) {
print(num)
}
for (row in 1:nrow(mat)) {
for (col in 1:ncol(matrix)) {
print(paste("The element at row:", row, "and col:", col, "is", mat[row,col]))
}
}
mat <- matrix(1:25, nrow=5)
for (row in 1:nrow(mat)) {
for (col in 1:ncol(mat)) {
print(paste("The element at row:", row, "and col:", col, "is", mat[row,col]))
}
}
hello <- function() {
print("Hello")
}
hello()
hello <- function(name) {
print("Hello", name)
}
hello('Sammy')
hello <- function(name) {
print("Hello", name)
}
hello <- function(name) {
print("Hello", name)
}
hello('Sammy')
hello(Sammy)
hello("Sammy")
hello()
hello <- function(name = 'Frank') {
# Code executes when the function is called
print("Hello", name)
}
hello()
hello <- function(name = 'Frank') {
# Code executes when the function is called
print("Hello", name)
}
hello()
add_num <- function(num1,num2){
print(num1+num2)
}
add_num(4,5)
my.sum <- num1 + num2
return(my.sum)
}
add_num <- function(num1,num2){
my.sum <- num1 + num2
return(my.sum)
}
result <- add_num(4,5)
print(result)
times5 <- function(num){
return(num*5)
}
print(times5(20))
times5 <- function(num){
my.result <- num * 5
return(my.result)
}
my.output <- times5(100)
print(my.output)
v <- "I am a global variable"
stuff <- "I am a global stuff"
fun <- function(stuff) {
print(v)
stuff <- "Reassign stuff inside of this function fun"
print(stuff)
}
fun(staff)
print(stuff)
65*7
hello_you2 <- function(name) {
return("Hello", name)
}
hello_you2('sam')
hello_you2('sam')
hello_you2(sam)
hello_you2 <- function(name) {
return("Hello", name)
}
hello_you2 <- function(x) {
return("Hello", x)
}
hello_you2(x)
hello_you2 <- function(name) {
return(paste("Hello", name))
}
hello_you2('Sam')
prod <- function(input1, input2){
return(input1*input2)
}
prod(3,4)
num_check <- function(x,y){
if (x == subset(y)){
print("TRUE")
}else{
print("FALSE")
}
}
num_check(2,c(1,2,3))
num_check <- function(x,y){
if (x == y){
print("TRUE")
}else{
print("FALSE")
}
}
num_check(2,c(1,2,3))
3==c(1,2,3)
num_check <- function(x,y){
if ((x == y) >0){
print("TRUE")
}else{
print("FALSE")
}
}
num_check(2,c(1,2,3))
num_check <- function(x,y){
for (z in y){
if (z == x){
return(TRUE)
}
}
return(FALSE)
}
num_check(2,c(1,2,3))
num_count <- function(x,y){
t <- 0
for (z in y) {
if (z ==x) {
t <- t+1
}
}
return(t)
}
num_count(2,c(1,1,2,2,3,3))
num_count(1,c(1,1,2,2,3,1,4,5,5,2,2,1,3))
bar_count <- function(x){
y <- x%/%5
z <- x%%5
}
retrun(y+z)
bar_count <- function(x){
y <- x%/%5
z <- x%%5
return(y+z)
}
bar_count(6)
bar_count(17)
summer <- function(x,y,z){
if (x%%3 == 0){
return(y+z)
}else if(y%%3==0){
return(x+z)
}else if(z%%==0){
return(x+y)
}else{
return(x+y+z)
}
}
summer <- function(x,y,z){
out <- NULL
if (a %% 3 !=0){
out <- append(a,out)
}
if (b %% 3 !=0){
out <- append(b,out)
}
if (c %% 3 !=0){
out<- append(c,out)
}
return(sum(out))
}
summer(7,2,3)
summer <- function(x,y,z){
out <- NULL
if (x %% 3 !=0){
out <- append(x,out)
}
if (y %% 3 !=0){
out <- append(y,out)
}
if (z %% 3 !=0){
out<- append(z,out)
}
return(sum(out))
}
summer <- function(x,y,z){
out <- NULL
if (x %% 3 !=0){
out <- append(x,out)
}
if (y %% 3 !=0){
out <- append(y,out)
}
if (z %% 3 !=0){
out<- append(z,out)
}
return(sum(out))
}
summer(7,2,3)
summer <- function(x,y,z){
out <- NULL
if (x %% 3 !=0){
out <- append(x,out)
}
if (y %% 3 !=0){
out <- append(y,out)
}
if (z %% 3 !=0){
out<- append(z,out)
}
return(out)
}
summer(7,2,3)
# Advanced R programming;
seq(0,10,by=2)
v <- c(1,4,7,2,13,3,11)
sort(v)
cv <- c("B","D","A")
sort(cv)
rev(v)
str(v)
# append to merge together;
append(v1,v2)
v1 <- 1:10
v2 <- 35:40
# append to merge together;
append(v1,v2)
is.vector(v)
typeof(v)
# Change the data type;
as.list(v)
# Check the data type;
v <- c(1,2,3)
is.vector(v)
typeof(v)
# Change the data type;
as.list(v)
# Sample
sample(x=1:10, 1)
addrand <- function(x){
ran <- sample(1:100,1)
return(x+ran)
}
addrand(10)
sapply(v,function(num){num*2})
text <- "Hi there, do you know who you are voting for?"
grepl("voting",text)
v <- c("a","b","c","d","d")
grep("b",v)
# Date
Sys.Date()
my.date <- as.Date("Nov-03-90"= "b-d-%y")
my.date <- as.Date("Nov-03-90", format="b-d-%y")
my.date
my.date <- as.Date("Nov-03-90", format="b-%d-%y")
my.date <- as.Date("Nov-03-90", format="b-%d-%y")
my.date
my.date <- as.Date("Nov-03-90", format="b-%d-%y")
my.date
my.date <- as.Date("Nov-03-90", format = "b-%d-%y")
my.date
my.date <- as.Date("Nov-03-90", format = "%b-%d-%y")
my.date
as.POSIXct("11:02:03", format="%H:%M:%S")
# Strptime;
strptime("11:02:03", format="%H:%M:%S")
#Dplyr
install.packages("dplyr")
install.packages("dplyr")
install.packages("nycflights13")
#Dplyr
#install.packages("dplyr")
#install.packages("nycflights13")
library(dplyr)
library(nycflights13)
head(flight)
attach(nycflight13)
head(flights)
summary(flights)
# Filter
head(filter(flights,month==11,day==3,carrier=="AA"))
# Slice
head(slice(flights,1:10))
# Arrange
head(arrange(flights,year,month,day,air_time))
# Arrange
head(arrange(flights,year,month,day,arrival_time))
# Arrange
head(arrange(flights,year,month,day,arr_time))
# Select
head(select(flights, carrier))
install.packages("lattice")
library(lattice)
# Dplyr;
library(mtcars)
install.packages(mtcars)
install.packages("mtcars")
data(mtcars)
data(mtcars)
head(mtcars)
# Return rows of cars that have an mpg value greater than 20 and 6 cylinders;
filter(mtcars, mtcars$mpg >20, mtcars$cyl==6)
# Reorder the Data Frame by cyl first, then by descending wt；
arrange(mtcars,descending(mtcars$wt))
# Reorder the Data Frame by cyl first, then by descending wt；
arrange(mtcars,desc(mtcars$wt))
# Reorder the Data Frame by cyl first, then by descending wt；
arrange(mtcars_new1,desc(mtcars$wt))
# Return rows of cars that have an mpg value greater than 20 and 6 cylinders;
mtcars_new1 <- filter(mtcars, mtcars$mpg >20, mtcars$cyl==6)
# Reorder the Data Frame by cyl first, then by descending wt；
arrange(mtcars_new1,desc(mtcars$wt))
# Reorder the Data Frame by cyl first, then by descending wt；
arrange(mtcars_new1,desc(mtcars_new1$wt))
# Reorder the Data Frame by cyl first, then by descending wt；
arrange(mtcars,desc(mtcars$wt))
# Reorder the Data Frame by cyl first, then by descending wt；
arrange(filter(mtcars, mtcars$mpg >20, mtcars$cyl==6),desc(mtcars$wt))
attach(mtcars)
filter(mtcars, mtcars$mpg >20, mtcars$cyl==6)
# Reorder the Data Frame by cyl first, then by descending wt；
arrange(filter(mtcars, mpg >20, cyl==6),desc(wt))
# Reorder the Data Frame by cyl first, then by descending wt；
arrange(mtcars, cyl, desc(wt))
# Select the columns mpg and hp；
select(mtcars,mpg,hp)
# Select the distinct values of the gear column;
distinct(select(mtcars,gear))
# Create a new column called "Performance" which is calculated by hp divided by wt;
mutate(mtcars,Performance = hp/2)
# Create a new column called "Performance" which is calculated by hp divided by wt;
mutate(mtcars,Performance = hp/wt)
# Find the mean mpg value using dplyr；
summarise(mtcars,mean_mpg = mean(mpg))
# Use pipe operators to get the mean hp value for cars with 6 cylinders；
mtcars >%> filter(cyl==6) >%> mean(hp)
# Use pipe operators to get the mean hp value for cars with 6 cylinders；
mtcars %>% filter(cyl==6) %>% mean(hp)
# Use pipe operators to get the mean hp value for cars with 6 cylinders；
mtcars %>% filter(cyl==6) %>% mean(hp,na.rm = TRUE)
mtcars %>% filter(cyl==6) %>% mean(hp,na.rm = TRUE)
# Use pipe operators to get the mean hp value for cars with 6 cylinders；
mtcars %>% filter(cyl==6) %>% summarise(mean(hp,na.rm = TRUE))
# Use pipe operators to get the mean hp value for cars with 6 cylinders；
mtcars %>% filter(cyl==6) %>% summarise(mean(hp))
mtcars %>% filter(cyl==6) %>% summarise(avg_hp = mean(hp))
install.packages("tidyr")
# Tidyr
library(tidyr)
install.packages("data.table")
library(data.table)
# ggplot2
# Histogram
library(ggplot2)
install.packages("ggplot2movies")
#install.packages("ggplot2movies")
library(ggplot2movies)
setwd("~/Documents/course/Statistics/ST 537 (2019 Fall)/Homework/HW6")
setwd("~/Documents/course/Statistics/ST 537 (2019 Fall)/Homework/HW6")
dental <- read.table("dental.txt")
head(dental)
colnames(dental) <- c("Age 8", "Age 10", "Age 12", "Age 14")
colnames(dental) <- c("Age 8", "Age 10", "Age 12", "Age 14")
head(dental)
colnames(dental) <- c("Age 8", "Age 10", "Age 12", "Age 14", "Indicator")
head(dental)
colnames(dental[2:5]) <- c("Number", "Age", "Distance", "Sex")
head(dental)
colnames(dental[2:5]) <- c("Number", "Age", "Distance", "Sex")
head(dental)
dental <- read.table("dental.txt")
colnames(dental[2:5]) <- c("Number", "Age", "Distance", "Sex")
head(dental)
colnames(dental[,2:5]) <- c("Number", "Age", "Distance", "Sex")
head(dental)
colnames(dental) <- c("","Number", "Age", "Distance", "Sex")
head(dental)
dental <- read.table("dental.txt")
colnames(dental) <- c("","Number", "Age", "Distance", "Sex")
dental <- dental[,2:5]
head(dental)
colnames(dental) <- c("","Subject", "Age", "Distance", "Sex")
dental <- read.table("dental.txt")
colnames(dental) <- c("","Subject", "Age", "Distance", "Sex")
dental <- dental[,2:5]
head(dental)
girls <- subset(dental, Sex == 0)[, 1:3]
boys <- subset(dental, Sex ==1)[ ,1:3]
mat.Gr <- matrix(girls$Distance, ncol=4, byrow=T)
mat.By <- matrix(boys$Distance, ncol=4, byrow = T)
muhat.girls <- colMeans(mat.Gr)
muhat.boys <- colMeans(mat.By)
View(mat.By)
mat.By
install.packages("nlme")
muhat.girls
mat.Gr
girls
dental
form1a <- Distance ~ Age * Sex
attributes(dental)
str(dental)
as.factor(dental$Subject)
dental <- within(dental, {subject <- factor(subject),
dental <- within(dental, {subject <- factor(subject)
sex <- factor(sex, levels = 0:1, labels = c("girl", "boy"))
})
dental <- within(dental, {Subject <- factor(Subject)
sex <- factor(sex, levels = 0:1, labels = c("girl", "boy"))
})
dental <- within(dental, {Subject <- factor(Subject)
Sex <- factor(Sex, levels = 0:1, labels = c("girl", "boy"))
})
dental
form1a <- Distance ~ Age * Sex
model.matrix(form1a, data=dental[dental$Subject==1,])
gls.fit.1a1 <- gls(model = form1a, data=dental, correlation=corSymm(form= ~1 | subject))
library(nlme)
gls.fit.1a1 <- gls(model = form1a, data=dental, correlation=corSymm(form= ~1 | subject))
gls.fit.1a1 <- gls(model = form1a, data=dental, correlation=corSymm(form= ~1 | Subject))
summary(gls.fit.1a1)
gls.fit.1a2 <- gls(model = form1a, data=dental, correlation=corCompSymm(form= ~1 | Subject))
gls.fit.1a2 <- gls(model = form1a, data=dental, correlation=corCompSymm(form= ~1 | Subject))
summary(gls.fit.1a2)
Sigma1a1 <- getVarCov((gls.fit.1a1,individual=1))
Sigma1a1 <- getVarCov((gls.fit.1a1, individual=1))
Sigma1a1 <- getVarCov((gls.fit.1a1,individual=1))
Sigma1a1 <- getVarCov(gls.fit.1a1, individual = 1)
Sigma1a1
Sigma1a2 <- getVarCov(gls.fit.1a2, individual = 1)
Sigma1a2
gls.cs.nv.1a <- gls(model=form1a, data=dental, correlation = corCompSymm(form = ~1|Subject),
weights = varIdent((form=~1|Age)))
Sigma1a3 <- getVarCov(gls.cs.nv.1a, individual = 1)
Sigma1a3
